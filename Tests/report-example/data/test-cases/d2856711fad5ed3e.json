{
  "uid" : "d2856711fad5ed3e",
  "name" : "test_get_not_existing_request_type_info",
  "fullName" : "TestOrderBook.test_get_request_info#test_get_not_existing_request_type_info",
  "historyId" : "fd97cdaec0aac3c717a2bea592a884eb",
  "time" : {
    "start" : 1650199673593,
    "stop" : 1650199673593,
    "duration" : 0
  },
  "description" : "\n    Test checks the possibility of getting a request info with a wrong request type from the OrderBook\n\n    Steps:\n        1. Generate request\n            E: Request generated successfully\n        2. Add request\n            E: Request added successfully\n        3. Get request info\n            E: RequestWasNotFoundError raised\n    ",
  "descriptionHtml" : "<pre><code>Test checks the possibility of getting a request info with a wrong request type from the OrderBook\n\nSteps:\n    1. Generate request\n        E: Request generated successfully\n    2. Add request\n        E: Request added successfully\n    3. Get request info\n        E: RequestWasNotFoundError raised\n</code></pre>\n",
  "status" : "skipped",
  "statusMessage" : "XFAIL\n\nTests.OrderBook.RequestWasNotFoundError: The request with id \"0\" was not found.",
  "statusTrace" : "order_book = <Tests.OrderBook.OrderBook.OrderBook object at 0x0000029EBD661360>\n\n    @severity(severity_level.CRITICAL)\n    @pytest.mark.negative\n    @pytest.mark.xfail(raises=RequestWasNotFoundError, strict=True)\n    def test_get_not_existing_request_type_info(order_book):\n        \"\"\"\n        Test checks the possibility of getting a request info with a wrong request type from the OrderBook\n    \n        Steps:\n            1. Generate request\n                E: Request generated successfully\n            2. Add request\n                E: Request added successfully\n            3. Get request info\n                E: RequestWasNotFoundError raised\n        \"\"\"\n        with step('Generate request'):\n            request = AskRequest(price=Defaults.price, volume=Defaults.volume)\n            attach_dict_to_report(request.as_dict, 'Request')\n        with step('Add request'):\n            order_book.add_request(request)\n        with step('Get request info'):\n>           order_book.get_request_info(request.id, request_type=RequestTypes.BID)\n\nTestOrderBook\\test_get_request_info.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nOrderBook\\OrderBook.py:188: in get_request_info\n    return self._get_request(request_id=request_id, request_type=request_type).as_dict\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Tests.OrderBook.OrderBook.OrderBook object at 0x0000029EBD661360>\nrequest_id = 0, request_type = 'Bid', raise_if_not_found = True\n\n    def _get_request(self, request_id: int, request_type: Optional[str] = None,\n                     raise_if_not_found: Optional[bool] = True) -> Request:\n        \"\"\"\n        Method for getting a request object from the requests list\n    \n        :param request_id: Request id\n        :param request_type: Request type\n        :param raise_if_not_found: Raise RequestWasNotFoundError exception if request was not found or not\n    \n        :return: Request object\n        \"\"\"\n        LOGGER.debug('Trying to find the request with id \"%s\"' % request_id)\n        self.__check_request_id(request_id)\n    \n        # If request_type is None - creating a list self._requests['Ask'] + self._requests['Bid']\n        if request_type is None:\n            requests_list = self.__requests[RequestTypes.ASK] + self.__requests[RequestTypes.BID]\n        # Else searching in self._requests[request_type]\n        else:\n            self.__check_request_type(request_type)\n            requests_list = self.__requests[request_type]\n    \n        # Searching request\n        for request in requests_list:\n            if request_id == request.id:\n                LOGGER.debug('The request was found successfully')\n                return request\n    \n        LOGGER.warning('The request with id \"%s\" was not found' % request_id)\n    \n        # Raising exception if request was not found and raise_if_not_found is True\n        if raise_if_not_found:\n>           raise RequestWasNotFoundError(f'The request with id \"{request_id}\" was not found.')\nE           Tests.OrderBook.RequestWasNotFoundError: The request with id \"0\" was not found.\n\nOrderBook\\OrderBook.py:177: RequestWasNotFoundError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "order_book",
    "time" : {
      "start" : 1650199673592,
      "stop" : 1650199673592,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n    Test checks the possibility of getting a request info with a wrong request type from the OrderBook\n\n    Steps:\n        1. Generate request\n            E: Request generated successfully\n        2. Add request\n            E: Request added successfully\n        3. Get request info\n            E: RequestWasNotFoundError raised\n    ",
    "status" : "skipped",
    "statusMessage" : "XFAIL\n\nTests.OrderBook.RequestWasNotFoundError: The request with id \"0\" was not found.",
    "statusTrace" : "order_book = <Tests.OrderBook.OrderBook.OrderBook object at 0x0000029EBD661360>\n\n    @severity(severity_level.CRITICAL)\n    @pytest.mark.negative\n    @pytest.mark.xfail(raises=RequestWasNotFoundError, strict=True)\n    def test_get_not_existing_request_type_info(order_book):\n        \"\"\"\n        Test checks the possibility of getting a request info with a wrong request type from the OrderBook\n    \n        Steps:\n            1. Generate request\n                E: Request generated successfully\n            2. Add request\n                E: Request added successfully\n            3. Get request info\n                E: RequestWasNotFoundError raised\n        \"\"\"\n        with step('Generate request'):\n            request = AskRequest(price=Defaults.price, volume=Defaults.volume)\n            attach_dict_to_report(request.as_dict, 'Request')\n        with step('Add request'):\n            order_book.add_request(request)\n        with step('Get request info'):\n>           order_book.get_request_info(request.id, request_type=RequestTypes.BID)\n\nTestOrderBook\\test_get_request_info.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nOrderBook\\OrderBook.py:188: in get_request_info\n    return self._get_request(request_id=request_id, request_type=request_type).as_dict\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Tests.OrderBook.OrderBook.OrderBook object at 0x0000029EBD661360>\nrequest_id = 0, request_type = 'Bid', raise_if_not_found = True\n\n    def _get_request(self, request_id: int, request_type: Optional[str] = None,\n                     raise_if_not_found: Optional[bool] = True) -> Request:\n        \"\"\"\n        Method for getting a request object from the requests list\n    \n        :param request_id: Request id\n        :param request_type: Request type\n        :param raise_if_not_found: Raise RequestWasNotFoundError exception if request was not found or not\n    \n        :return: Request object\n        \"\"\"\n        LOGGER.debug('Trying to find the request with id \"%s\"' % request_id)\n        self.__check_request_id(request_id)\n    \n        # If request_type is None - creating a list self._requests['Ask'] + self._requests['Bid']\n        if request_type is None:\n            requests_list = self.__requests[RequestTypes.ASK] + self.__requests[RequestTypes.BID]\n        # Else searching in self._requests[request_type]\n        else:\n            self.__check_request_type(request_type)\n            requests_list = self.__requests[request_type]\n    \n        # Searching request\n        for request in requests_list:\n            if request_id == request.id:\n                LOGGER.debug('The request was found successfully')\n                return request\n    \n        LOGGER.warning('The request with id \"%s\" was not found' % request_id)\n    \n        # Raising exception if request was not found and raise_if_not_found is True\n        if raise_if_not_found:\n>           raise RequestWasNotFoundError(f'The request with id \"{request_id}\" was not found.')\nE           Tests.OrderBook.RequestWasNotFoundError: The request with id \"0\" was not found.\n\nOrderBook\\OrderBook.py:177: RequestWasNotFoundError",
    "steps" : [ {
      "name" : "Generate request",
      "time" : {
        "start" : 1650199673593,
        "stop" : 1650199673593,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "1032da439ea8e825",
        "name" : "Request",
        "source" : "1032da439ea8e825.json",
        "type" : "application/json",
        "size" : 69
      } ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "Add request",
      "time" : {
        "start" : 1650199673593,
        "stop" : 1650199673593,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Get request info",
      "time" : {
        "start" : 1650199673593,
        "stop" : 1650199673593,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "Tests.OrderBook.RequestWasNotFoundError: The request with id \"0\" was not found.\n",
      "statusTrace" : "  File \"C:\\Users\\Kirill\\Desktop\\Main\\Projects\\GitHub\\order_book\\Tests\\TestOrderBook\\test_get_request_info.py\", line 103, in test_get_not_existing_request_type_info\n    order_book.get_request_info(request.id, request_type=RequestTypes.BID)\n  File \"C:\\Users\\Kirill\\Desktop\\Main\\Projects\\GitHub\\order_book\\Tests\\OrderBook\\OrderBook.py\", line 188, in get_request_info\n    return self._get_request(request_id=request_id, request_type=request_type).as_dict\n  File \"C:\\Users\\Kirill\\Desktop\\Main\\Projects\\GitHub\\order_book\\Tests\\OrderBook\\OrderBook.py\", line 177, in _get_request\n    raise RequestWasNotFoundError(f'The request with id \"{request_id}\" was not found.')\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "bb8997910fe3ba57",
      "name" : "log",
      "source" : "bb8997910fe3ba57.txt",
      "type" : "text/plain",
      "size" : 926
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2,
    "stepsCount" : 3,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "order_book::0",
    "time" : {
      "start" : 1650199673607,
      "stop" : 1650199673607,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.xfail(raises=<class 'Tests.OrderBook.RequestWasNotFoundError'>, strict=True)"
  }, {
    "name" : "tag",
    "value" : "negative"
  }, {
    "name" : "parentSuite",
    "value" : "TestOrderBook"
  }, {
    "name" : "suite",
    "value" : "test_get_request_info"
  }, {
    "name" : "host",
    "value" : "DESKTOP-G2TA214"
  }, {
    "name" : "thread",
    "value" : "13036-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestOrderBook.test_get_request_info"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ ],
    "tags" : [ "negative", "@pytest.mark.xfail(raises=<class 'Tests.OrderBook.RequestWasNotFoundError'>, strict=True)" ]
  },
  "source" : "d2856711fad5ed3e.json",
  "parameterValues" : [ ]
}