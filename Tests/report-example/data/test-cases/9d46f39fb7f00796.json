{
  "uid" : "9d46f39fb7f00796",
  "name" : "test_wrong_price_type[price2]",
  "fullName" : "TestCreateRequest.test_price#test_wrong_price_type",
  "historyId" : "d15eb379744f17064c9dbfbd4ede6489",
  "time" : {
    "start" : 1650199673263,
    "stop" : 1650199673264,
    "duration" : 1
  },
  "description" : "\n    Test checks the possibility of creating a request with a price of the wrong type\n\n    Steps:\n        1. Creating request\n            E: Request not created\n            E: RequestPriceError raised\n    ",
  "descriptionHtml" : "<pre><code>Test checks the possibility of creating a request with a price of the wrong type\n\nSteps:\n    1. Creating request\n        E: Request not created\n        E: RequestPriceError raised\n</code></pre>\n",
  "status" : "skipped",
  "statusMessage" : "XFAIL\n\nTests.OrderBook.RequestPriceError: The price should be an instance of int or float, got <class 'set'>.",
  "statusTrace" : "TypeError\n\nThe above exception was the direct cause of the following exception:\n\nprice = {100}\n\n    @severity(severity_level.CRITICAL)\n    @pytest.mark.negative\n    @pytest.mark.xfail(raises=RequestPriceError, strict=True)\n    @pytest.mark.parametrize('price', [\n        f'{Defaults.price}',\n        [Defaults.price],\n        {Defaults.price},\n        None,\n    ])\n    def test_wrong_price_type(price):\n        \"\"\"\n        Test checks the possibility of creating a request with a price of the wrong type\n    \n        Steps:\n            1. Creating request\n                E: Request not created\n                E: RequestPriceError raised\n        \"\"\"\n        with step('Creating request'):\n>           Request(price=price, volume=Defaults.volume)  # noqa\n\nTestCreateRequest\\test_price.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nOrderBook\\Requests.py:39: in __init__\n    self.price = price\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Tests.OrderBook.Requests.Request object at 0x0000029EBD592CE0>\nvalue = {100}\n\n    @price.setter\n    def price(self, value: PRICE_TYPE) -> None:\n        \"\"\"\n        Request price setter\n    \n        :param value: New request price\n    \n        :return: None\n        \"\"\"\n        LOGGER.debug(f'Trying to set a new price (%s) for the request with id \"%s\"' % (value, self.id))\n    \n        # The price should be an instance of int or float\n        if not isinstance(value, PRICE_TYPE):\n            LOGGER.error('The new price is not an int or float instance (%s)' % type(value))\n>           raise RequestPriceError(\n                f'The price should be an instance of int or float, got {type(value)}.') from TypeError\nE           Tests.OrderBook.RequestPriceError: The price should be an instance of int or float, got <class 'set'>.\n\nOrderBook\\Requests.py:66: RequestPriceError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n    Test checks the possibility of creating a request with a price of the wrong type\n\n    Steps:\n        1. Creating request\n            E: Request not created\n            E: RequestPriceError raised\n    ",
    "status" : "skipped",
    "statusMessage" : "XFAIL\n\nTests.OrderBook.RequestPriceError: The price should be an instance of int or float, got <class 'set'>.",
    "statusTrace" : "TypeError\n\nThe above exception was the direct cause of the following exception:\n\nprice = {100}\n\n    @severity(severity_level.CRITICAL)\n    @pytest.mark.negative\n    @pytest.mark.xfail(raises=RequestPriceError, strict=True)\n    @pytest.mark.parametrize('price', [\n        f'{Defaults.price}',\n        [Defaults.price],\n        {Defaults.price},\n        None,\n    ])\n    def test_wrong_price_type(price):\n        \"\"\"\n        Test checks the possibility of creating a request with a price of the wrong type\n    \n        Steps:\n            1. Creating request\n                E: Request not created\n                E: RequestPriceError raised\n        \"\"\"\n        with step('Creating request'):\n>           Request(price=price, volume=Defaults.volume)  # noqa\n\nTestCreateRequest\\test_price.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nOrderBook\\Requests.py:39: in __init__\n    self.price = price\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Tests.OrderBook.Requests.Request object at 0x0000029EBD592CE0>\nvalue = {100}\n\n    @price.setter\n    def price(self, value: PRICE_TYPE) -> None:\n        \"\"\"\n        Request price setter\n    \n        :param value: New request price\n    \n        :return: None\n        \"\"\"\n        LOGGER.debug(f'Trying to set a new price (%s) for the request with id \"%s\"' % (value, self.id))\n    \n        # The price should be an instance of int or float\n        if not isinstance(value, PRICE_TYPE):\n            LOGGER.error('The new price is not an int or float instance (%s)' % type(value))\n>           raise RequestPriceError(\n                f'The price should be an instance of int or float, got {type(value)}.') from TypeError\nE           Tests.OrderBook.RequestPriceError: The price should be an instance of int or float, got <class 'set'>.\n\nOrderBook\\Requests.py:66: RequestPriceError",
    "steps" : [ {
      "name" : "Creating request",
      "time" : {
        "start" : 1650199673263,
        "stop" : 1650199673263,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "Tests.OrderBook.RequestPriceError: The price should be an instance of int or float, got <class 'set'>.\n",
      "statusTrace" : "  File \"C:\\Users\\Kirill\\Desktop\\Main\\Projects\\GitHub\\order_book\\Tests\\TestCreateRequest\\test_price.py\", line 97, in test_wrong_price_type\n    Request(price=price, volume=Defaults.volume)  # noqa\n  File \"C:\\Users\\Kirill\\Desktop\\Main\\Projects\\GitHub\\order_book\\Tests\\OrderBook\\Requests.py\", line 39, in __init__\n    self.price = price\n  File \"C:\\Users\\Kirill\\Desktop\\Main\\Projects\\GitHub\\order_book\\Tests\\OrderBook\\Requests.py\", line 66, in price\n    raise RequestPriceError(\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "4a64f57efa345656",
      "name" : "log",
      "source" : "4a64f57efa345656.txt",
      "type" : "text/plain",
      "size" : 200
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.xfail(raises=<class 'Tests.OrderBook.RequestPriceError'>, strict=True)"
  }, {
    "name" : "tag",
    "value" : "negative"
  }, {
    "name" : "parentSuite",
    "value" : "TestCreateRequest"
  }, {
    "name" : "suite",
    "value" : "test_price"
  }, {
    "name" : "host",
    "value" : "DESKTOP-G2TA214"
  }, {
    "name" : "thread",
    "value" : "13036-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCreateRequest.test_price"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "price",
    "value" : "{100}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ ],
    "tags" : [ "negative", "@pytest.mark.xfail(raises=<class 'Tests.OrderBook.RequestPriceError'>, strict=True)" ]
  },
  "source" : "9d46f39fb7f00796.json",
  "parameterValues" : [ "{100}" ]
}